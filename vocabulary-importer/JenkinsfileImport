pipeline {
  agent any
  tools {
    maven 'Maven 3.8.5'
    jdk 'OpenJDK11'
  }
  options {
    buildDiscarder(logRotator(numToKeepStr: '20'))
    timestamps()
  }
  parameters {
    choice(name: 'ENV', choices: ['dev', 'uat', 'prod'], description: 'Choose environment')
    choice(name: 'VERSION', choices: ['releases', 'snapshots'],
            description: 'Snapshot versions should be used only for development purposes.')
    string(name: 'VOCABULARY_NAME', defaultValue: '', description: 'Vocabulary name')
    string(name: 'VOCABULARY_LABEL_EN', defaultValue: '', description: 'Vocabulary label EN')
    string(name: 'VOCABULARY_DEFINITION_EN', defaultValue: '', description: 'Vocabulary definition EN')

    string(name: 'CSV_DELIMITER', defaultValue: '', description: 'CSV delimiter')
    string(name: 'LIST_DELIMITER', defaultValue: '', description: 'List delimiter')
    string(name: 'ENCODING', defaultValue: 'UTF-8', description: 'Encoding')

    file(name: 'CONCEPTS_FILE', description: 'Upload the file with the concepts')
    file(name: 'HIDDEN_LABELS_FILE', description: 'Upload the file with the hidden labels')

    booleanParam(name: 'MIGRATION', defaultValue: false, description: 'Migration')
    booleanParam(name: 'IMPORT_HIDDEN_LABELS_ONLY', defaultValue: false, description: 'Import hidden labels only')
    booleanParam(name: 'IMPORT_LABELS_AND_DEFINITIONS_ONLY', defaultValue: false, description: 'Import labels and definitions only')

    string(name: 'API_URL', defaultValue: '', description: 'API URL')
    string(name: 'API_USER', defaultValue: '', description: 'API User')
    //password(name: 'API_PASSWORD', defaultValue: '', description: 'API Password')
    string(name: 'TARGET_API_URL', defaultValue: '', description: 'Target API URL')
    string(name: 'TARGET_API_USER', defaultValue: '', description: 'Target API User')
    //password(name: 'TARGET_API_PASSWORD', defaultValue: '', description: 'Target API Password')
  }
  stages {
    stage('Import') {
      environment {
        REPO_URL = "https://repository.gbif.org/service/rest/v1/search/assets/download?repository=${params.VERSION}" +
                   "&group=org.gbif.vocabulary&name=vocabulary-importer&sort=version&direction=desc" +
                   "&maven.classifier&maven.extension=jar"
        CLI_ARGS = createCliArgs()
      }
      steps {
          sh """
           rm -rf *

           if [[ $API_PASSWORD != '' ]]; then
             EXPORT API_PASSWORD=$API_PASSWORD
           fi

           if [[ $TARGET_API_PASSWORD != '' ]]; then
             EXPORT TARGET_API_PASSWORD=$TARGET_API_PASSWORD
           fi

           curl "${REPO_URL}" -L -o vocabulary-importer.jar
           java --add-opens java.base/java.lang=ALL-UNNAMED --add-opens java.base/java.lang.invoke=ALL-UNNAMED \
                -jar vocabulary-importer.jar \
                ${CLI_ARGS} --conceptsPath $CONCEPTS_FILE
          """
      }
    }
  }
}

def createCliArgs() {
  def args = ""

  if (params.VOCABULARY_NAME != '') {
    args += "--vocabularyName ${params.VOCABULARY_NAME} "
  }

  if (params.VOCABULARY_LABEL_EN != '') {
    args += "--vocabularyLabelEN ${params.VOCABULARY_LABEL_EN} "
  }

  if (params.VOCABULARY_DEFINITION_EN != '') {
    args += "--vocabularyDefinitionEN ${params.VOCABULARY_DEFINITION_EN} "
  }

  if (params.CSV_DELIMITER != '') {
    args += "--csvDelimiter ${params.CSV_DELIMITER} "
  }

  if (params.LIST_DELIMITER != '') {
    args += "--listDelimiter ${params.LIST_DELIMITER} "
  }

  if (params.ENCODING != '') {
    args += "--encoding ${params.ENCODING} "
  }

  if (params.CONCEPTS_FILE != null) {
    args += "--conceptsPath ${params.CONCEPTS_FILE} "
  }

  if (params.HIDDEN_LABELS_FILE != null) {
    args += "--hiddenLabelsPath ${params.HIDDEN_LABELS_FILE} "
  }

  if (params.MIGRATION != '') {
    args += "--migration "
  }

  if (params.IMPORT_HIDDEN_LABELS_ONLY != '') {
    args += "--importHiddenLabelsOnly "
  }

  if (params.IMPORT_LABELS_AND_DEFINITIONS_ONLY != '') {
    args += "--importLabelsAndDefinitionsOnly "
  }

  if (params.API_URL != '') {
    args += "--apiUrl ${params.API_URL} "
  }

  if (params.API_USER != '') {
    args += "--apiUser ${params.API_USER} "
  }

  if (params.TARGET_API_URL != '') {
    args += "--targetApiUrl ${params.TARGET_API_URL} "
  }

  if (params.TARGET_API_USER != '') {
    args += "--targetApiUser ${params.TARGET_API_USER} "
  }

  return args
}
