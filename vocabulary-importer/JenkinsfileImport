pipeline {
    agent any
    tools {
        maven 'Maven 3.8.5'
        jdk 'OpenJDK11'
    }
    options {
        buildDiscarder(logRotator(numToKeepStr: '15'))
        timestamps()
    }
    parameters {
        choice(name: 'ENV', choices: ['dev', 'uat', 'prod'], description: 'Choose environment')
        choice(name: 'VERSION', choices: ['releases', 'snapshots'],
                description: 'Snapshot versions should be used only for development purposes.')

        string(name: 'VOCABULARY_NAME', defaultValue: '', description: 'Vocabulary name')
        string(name: 'VOCABULARY_LABEL_EN', defaultValue: '', description: 'Vocabulary label EN')
        string(name: 'VOCABULARY_DEFINITION_EN', defaultValue: '', description: 'Vocabulary definition EN')

        string(name: 'CSV_DELIMITER', defaultValue: '', description: 'CSV delimiter. The comma(,) is used by default')
        string(name: 'LIST_DELIMITER', defaultValue: '', description: 'List delimiter. The pipe(|) is used by default')
        string(name: 'ENCODING', defaultValue: '', description: 'Encoding. UTF-8 is used by default')

        stashedFile 'CONCEPTS_FILE'
        stashedFile 'HIDDEN_LABELS_FILE'

        booleanParam(name: 'MIGRATION', defaultValue: false, description: 'Migrate one vocabulary to one env to another')
        choice(name: 'MIGRATE_TO', choices: ['dev', 'uat', 'prod'], description: 'Only used if the MIGRATION flag is enabled')
        booleanParam(name: 'IMPORT_HIDDEN_LABELS_ONLY', defaultValue: false, description: 'Import hidden labels only')
        booleanParam(name: 'IMPORT_LABELS_AND_DEFINITIONS_ONLY', defaultValue: false, description: 'Import labels and definitions only')
    }
    stages {
        stage('Import') {
            environment {
                REPO_URL = "https://repository.gbif.org/service/rest/v1/search/assets/download?repository=${params.VERSION}" +
                        "&group=org.gbif.vocabulary&name=vocabulary-importer&sort=version&direction=desc" +
                        "&maven.classifier&maven.extension=jar"
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'gbif-vocabulary-importer', usernameVariable: 'VOCAB_USER', passwordVariable: 'VOCAB_PWD')]) {
                    script {
                        try {
                            unstash 'CONCEPTS_FILE'
                        } catch (Exception e) {
                            // do nothing
                        }
                        try {
                            unstash 'HIDDEN_LABELS_FILE'
                        } catch (Exception e) {
                            // do nothing
                        }
                        CLI_ARGS = createCliArgs("${VOCAB_USER}")

                        sh '''
                           export API_PASSWORD=$VOCAB_PWD
                           export TARGET_API_PASSWORD=$VOCAB_PWD
                           curl "$REPO_URL" -L -o vocabulary-importer.jar
                           java --add-opens java.base/java.lang=ALL-UNNAMED --add-opens java.base/java.lang.invoke=ALL-UNNAMED \
                                -jar vocabulary-importer.jar \
                                ${CLI_ARGS}
                           '''.toString().replace('${CLI_ARGS}', CLI_ARGS)
                    }
                }
            }
        }
    }
}

def createCliArgs(user) {
    def args = ""

    args += "--apiUser " + user + " "
    args += setApiUrl("apiUrl", params.ENV)

    if (params.VOCABULARY_NAME != '') {
        args += "--vocabularyName ${params.VOCABULARY_NAME} "
    }

    if (params.VOCABULARY_LABEL_EN != '') {
        args += "--vocabularyLabelEN ${params.VOCABULARY_LABEL_EN} "
    }

    if (params.VOCABULARY_DEFINITION_EN != '') {
        args += "--vocabularyDefinitionEN ${params.VOCABULARY_DEFINITION_EN} "
    }

    if (params.CSV_DELIMITER != '') {
        args += "--csvDelimiter ${params.CSV_DELIMITER} "
    }

    if (params.LIST_DELIMITER != '') {
        args += "--listDelimiter ${params.LIST_DELIMITER} "
    }

    if (params.ENCODING != '') {
        args += "--encoding ${params.ENCODING} "
    }

    try {
        if (CONCEPTS_FILE_FILENAME != null && CONCEPTS_FILE_FILENAME != '') {
            args += "--conceptsPath CONCEPTS_FILE "
        }
    } catch (Exception e) {
        // do nothing
    }

    try {
        if (HIDDEN_LABELS_FILE_FILENAME != null && HIDDEN_LABELS_FILE_FILENAME != '') {
            args += "--hiddenLabelsPath HIDDEN_LABELS_FILE "
        }
    } catch (Exception e) {
        // do nothing
    }

    if (params.MIGRATION == true) {
        args += "--migration "
        args += setApiUrl("targetApiUrl", params.MIGRATE_TO)
        args += "--targetApiUser " + user + " "
    }

    if (params.IMPORT_HIDDEN_LABELS_ONLY == true) {
        args += "--importHiddenLabelsOnly "
    }

    if (params.IMPORT_LABELS_AND_DEFINITIONS_ONLY == true) {
        args += "--importLabelsAndDefinitionsOnly "
    }

    return args
}

static def setApiUrl(paramName, env_param) {
    def apiUrlArg = "--" + paramName + " "
    if (env_param == 'prod') {
        apiUrlArg += "https://api.gbif.org/v1/ "
    } else if (env_param == 'uat') {
        apiUrlArg += "https://api.gbif-uat.org/v1/ "
    } else {
        apiUrlArg += "https://api.gbif-dev.org/v1/ "
    }

    return apiUrlArg
}
