<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.gbif.vocabulary.persistence.mappers.VocabularyMapper">

  <resultMap id="VOCABULARY_MAP" type="Vocabulary" autoMapping="true">
    <id property="key" column="key"/>
    <result property="label" column="label" typeHandler="ValueByLanguageMapTypeHandler" />
    <result property="definition" column="definition" typeHandler="ValueByLanguageMapTypeHandler" />
    <result property="externalDefinitions" column="external_definition_urls" typeHandler="UriArrayTypeHandler" />
    <result property="editorialNotes" column="editorial_notes" typeHandler="StringArrayTypeHandler" />
  </resultMap>

  <sql id="VOCABULARY_WRITE_FIELDS">
    namespace, name, label, definition, external_definition_urls, editorial_notes, created_by, modified_by, created, modified
  </sql>

  <sql id="VOCABULARY_PARAMS_CREATE">
    #{namespace,jdbcType=VARCHAR},
    #{name,jdbcType=VARCHAR},
    #{label,jdbcType=OTHER,typeHandler=ValueByLanguageMapTypeHandler}::hstore,
    #{definition,jdbcType=OTHER,typeHandler=ValueByLanguageMapTypeHandler}::hstore,
    #{externalDefinitions,jdbcType=ARRAY,typeHandler=UriArrayTypeHandler},
    #{editorialNotes,jdbcType=ARRAY,typeHandler=StringArrayTypeHandler},
    #{createdBy,jdbcType=VARCHAR},
    #{modifiedBy,jdbcType=VARCHAR},
    now(), <!-- created -->
    now() <!-- modified -->
  </sql>

  <sql id="VOCABULARY_PARAMS_UPDATE">
    namespace = #{namespace,jdbcType=VARCHAR},
    name = #{name,jdbcType=VARCHAR},
    label = #{label,jdbcType=OTHER,typeHandler=ValueByLanguageMapTypeHandler}::hstore,
    definition = #{definition,jdbcType=OTHER,typeHandler=ValueByLanguageMapTypeHandler}::hstore,
    external_definition_urls = #{externalDefinitions,jdbcType=ARRAY,typeHandler=UriArrayTypeHandler},
    editorial_notes = #{editorialNotes,jdbcType=ARRAY,typeHandler=StringArrayTypeHandler},
    created_by = #{createdBy,jdbcType=VARCHAR},
    modified_by = #{modifiedBy,jdbcType=VARCHAR},
    created = now(),
    modified = now(),
    deleted = null <!-- if we're updating it can't be deleted -->
  </sql>

  <!-- QUERIES FROM HERE -->

  <insert id="create" useGeneratedKeys="true" keyProperty="key" keyColumn="key">
    INSERT INTO vocabulary(<include refid="VOCABULARY_WRITE_FIELDS"/>)
    VALUES(<include refid="VOCABULARY_PARAMS_CREATE"/>)
  </insert>

  <update id="update">
    UPDATE vocabulary
    SET <include refid="VOCABULARY_PARAMS_UPDATE" />
    WHERE key = #{key,jdbcType=INTEGER} AND deleted IS NULL
  </update>

  <select id="get" resultMap="VOCABULARY_MAP">
    SELECT *
    FROM vocabulary v
    WHERE v.key = #{key,jdbcType=INTEGER}
  </select>

  <select id="list" resultType="Vocabulary" resultMap="VOCABULARY_MAP">
    SELECT *
    FROM vocabulary v
    <if test="query != null" >
      JOIN to_tsquery('english',regexp_replace(unaccent(trim(#{query})),'\s+',':*&amp;')||':*') AS query ON query @@ fulltext_search
    </if>
    WHERE v.deleted IS NULL
    <if test="deprecated != null">
      AND v.deprecated IS <if test="deprecated">NOT</if> NULL
    </if>
    <if test="name != null">
      AND v.name = #{name}
    </if>
    <if test="namespace != null">
      AND v.namespace = #{namespace}
    </if>
    ORDER BY <if test="query != null" >ts_rank_cd(v.fulltext_search, query) DESC,</if> v.created DESC, v.key
    <if test="page != null">
      LIMIT #{page.limit} OFFSET #{page.offset}
    </if>
  </select>

  <select id="count" resultType="Long">
    SELECT COUNT(*)
    FROM vocabulary v
    <if test="query != null" >
      JOIN to_tsquery('english',regexp_replace(unaccent(trim(#{query})),'\s+',':*&amp;')||':*') AS query ON query @@ fulltext_search
    </if>
    WHERE v.deleted IS NULL
    <if test="deprecated != null">
      AND v.deprecated IS <if test="deprecated">NOT</if> NULL
    </if>
    <if test="name != null">
      AND v.name = #{name}
    </if>
    <if test="namespace != null">
      AND v.namespace = #{namespace}
    </if>
  </select>

  <select id="suggest" resultType="KeyNameResult">
    SELECT key, name
    FROM (
      (SELECT key, name
       FROM vocabulary
       WHERE name ilike #{query}||'%' AND deleted IS NULL AND deprecated IS NULL
       ORDER BY name LIMIT 20
      )
      UNION ALL
      (SELECT key, name
       FROM vocabulary
       WHERE name ilike '%'||#{query}||'%' AND NOT name ilike #{query}||'%' AND deleted IS NULL AND deprecated IS NULL
       ORDER BY name LIMIT 20
      )
    ) t1 LIMIT 20
  </select>

  <select id="findSimilarities" resultType="KeyNameResult">
    SELECT key, name
    FROM vocabulary where #{name} = ANY(avals(label))
    LIMIT 5
  </select>

  <update id="deprecate">
    UPDATE vocabulary
    SET deprecated = now(),
    deprecated_by = #{deprecatedBy,jdbcType=VARCHAR}
    <choose>
      <when test="replacementKey != null">
        ,replaced_by_key=#{replacementKey,jdbcType=INTEGER}
      </when>
      <otherwise>
        ,replaced_by_key=null
      </otherwise>
    </choose>
    WHERE key = #{key,jdbcType=INTEGER} AND deleted IS NULL
  </update>

  <update id="restoreDeprecated">
    UPDATE vocabulary
    SET deprecated = null, deprecated_by = null, replaced_by_key = null
    WHERE key = #{key,jdbcType=INTEGER} AND deleted IS NULL
  </update>

  <select id="isDeprecated" resultType="Boolean">
    SELECT case when count(*) > 0 then 1 else 0 end
    FROM vocabulary
    WHERE key = #{key,jdbcType=INTEGER} AND deprecated IS NOT NULL
  </select>

</mapper>