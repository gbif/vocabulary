<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.gbif.vocabulary.persistence.mappers.ConceptMapper">

  <resultMap id="CONCEPT_MAP" type="Concept" autoMapping="true">
    <id property="key" column="key"/>
    <result property="label" column="label" typeHandler="ValueByLanguageMapTypeHandler" />
    <result property="alternativeLabels" column="alternative_labels" typeHandler="ValueListByLanguageMapTypeHandler" />
    <result property="misspeltLabels" column="misspelt_labels" typeHandler="ValueListByLanguageMapTypeHandler" />
    <result property="definition" column="definition" typeHandler="ValueByLanguageMapTypeHandler" />
    <result property="externalDefinitions" column="external_definition_urls" typeHandler="UriArrayTypeHandler" />
    <result property="sameAsUris" column="same_as_uris" typeHandler="UriArrayTypeHandler" />
    <result property="editorialNotes" column="editorial_notes" typeHandler="StringArrayTypeHandler" />
  </resultMap>

  <sql id="CONCEPT_INSERT_FIELDS">
    vocabulary_key, parent_key, name, label, alternative_labels, misspelt_labels, definition,
    external_definition_urls, same_as_uris, editorial_notes, created_by, modified_by, created, modified
  </sql>

  <sql id="CONCEPT_INSERT_PARAMS">
    #{vocabularyKey,jdbcType=INTEGER},
    #{parentKey,jdbcType=INTEGER},
    #{name,jdbcType=VARCHAR},
    #{label,jdbcType=OTHER,typeHandler=ValueByLanguageMapTypeHandler}::hstore,
    #{alternativeLabels,jdbcType=OTHER,typeHandler=ValueListByLanguageMapTypeHandler}::hstore,
    #{misspeltLabels,jdbcType=OTHER,typeHandler=ValueListByLanguageMapTypeHandler}::hstore,
    #{definition,jdbcType=OTHER,typeHandler=ValueByLanguageMapTypeHandler}::hstore,
    #{externalDefinitions,jdbcType=ARRAY,typeHandler=UriArrayTypeHandler},
    #{sameAsUris,jdbcType=ARRAY,typeHandler=UriArrayTypeHandler},
    #{editorialNotes,jdbcType=ARRAY,typeHandler=StringArrayTypeHandler},
    #{createdBy,jdbcType=VARCHAR},
    #{modifiedBy,jdbcType=VARCHAR},
    now(), <!-- created -->
    now() <!-- modified -->
  </sql>

  <sql id="CONCEPT_UPDATE_PARAMS">
    vocabulary_key = #{vocabularyKey,jdbcType=INTEGER},
    parent_key = #{parentKey,jdbcType=INTEGER},
    replaced_by_key = #{replacedByKey,jdbcType=INTEGER},
    name = #{name,jdbcType=VARCHAR},
    label = #{label,jdbcType=OTHER,typeHandler=ValueByLanguageMapTypeHandler}::hstore,
    alternative_labels = #{alternativeLabels,jdbcType=OTHER,typeHandler=ValueListByLanguageMapTypeHandler}::hstore,
    misspelt_labels = #{misspeltLabels,jdbcType=OTHER,typeHandler=ValueListByLanguageMapTypeHandler}::hstore,
    definition = #{definition,jdbcType=OTHER,typeHandler=ValueByLanguageMapTypeHandler}::hstore,
    external_definition_urls = #{externalDefinitions,jdbcType=ARRAY,typeHandler=UriArrayTypeHandler},
    same_as_uris = #{sameAsUris,jdbcType=ARRAY,typeHandler=UriArrayTypeHandler},
    editorial_notes = #{editorialNotes,jdbcType=ARRAY,typeHandler=StringArrayTypeHandler},
    created_by = #{createdBy,jdbcType=VARCHAR},
    modified_by = #{modifiedBy,jdbcType=VARCHAR},
    created = now(),
    modified = now(),
    deleted = null <!-- if we're updating it can't be deleted -->
  </sql>

  <!-- QUERIES FROM HERE -->

  <insert id="create" useGeneratedKeys="true" keyProperty="key" keyColumn="key">
    INSERT INTO concept(<include refid="CONCEPT_INSERT_FIELDS"/>)
    VALUES(<include refid="CONCEPT_INSERT_PARAMS"/>)
  </insert>

  <update id="update">
    UPDATE concept
    SET <include refid="CONCEPT_UPDATE_PARAMS" />
    WHERE key = #{key,jdbcType=INTEGER} AND deleted IS NULL
  </update>

  <update id="delete">
    UPDATE concept
    SET deleted = now()
    WHERE key = #{key,jdbcType=OTHER}
  </update>

  <select id="get" resultMap="CONCEPT_MAP">
    SELECT *
    FROM concept c
    WHERE c.key = #{key,jdbcType=INTEGER}
  </select>

  <select id="getByNameAndVocabulary" resultMap="CONCEPT_MAP">
    SELECT *
    FROM concept c
    INNER JOIN vocabulary v on v.key = c.vocabulary_key
    WHERE c.name = #{name,jdbcType=VARCHAR} and v.name = #{vocabularyName,jdbcType=VARCHAR}
  </select>

  <update id="deprecate">
    UPDATE concept
    SET deprecated = now(),
    deprecated_by = #{deprecatedBy,jdbcType=VARCHAR}
    <choose>
      <when test="replacementKey != null">
        ,replaced_by_key=#{replacementKey,jdbcType=INTEGER}
      </when>
      <otherwise>
        ,replaced_by_key=null
      </otherwise>
    </choose>
    WHERE key = #{key,jdbcType=INTEGER} AND deleted IS NULL
  </update>

  <update id="deprecateInBulk">
    UPDATE concept
    SET deprecated = now(),
    deprecated_by = #{deprecatedBy,jdbcType=VARCHAR}
    <choose>
      <when test="replacementKey != null">
        ,replaced_by_key=#{replacementKey,jdbcType=INTEGER}
      </when>
      <otherwise>
        ,replaced_by_key=null
      </otherwise>
    </choose>
    WHERE deleted IS NULL AND key IN
    <foreach collection="keys" item="key" separator="," open="(" close=")">
      #{key}
    </foreach>
  </update>

  <update id="restoreDeprecated">
    UPDATE concept
    SET deprecated = null, deprecated_by = null, replaced_by_key = null
    WHERE key = #{key,jdbcType=INTEGER} AND deleted IS NULL
  </update>

  <update id="restoreDeprecatedInBulk">
    UPDATE concept
    SET deprecated = null, deprecated_by = null, replaced_by_key = null
    WHERE deleted IS NULL AND key IN
    <foreach collection="keys" item="key" separator="," open="(" close=")">
      #{key}
    </foreach>
  </update>

  <select id="list" resultType="Concept" resultMap="CONCEPT_MAP">
    SELECT *
    FROM concept c
    <if test="query != null" >
      JOIN to_tsquery('english',regexp_replace(unaccent(trim(#{query})),'\s+',':*&amp;')||':*') AS query ON query @@ fulltext_search
    </if>
    WHERE
    c.deleted IS NULL
    <if test="vocabularyKey != null">
      AND c.vocabulary_key = #{vocabularyKey}
    </if>
    <if test="parentKey != null">
      AND c.parent_key = #{parentKey}
    </if>
    <if test="replacedByKey != null">
      AND c.replaced_by_key = #{replacedByKey}
    </if>
    <if test="name != null">
      AND c.name = #{name}
    </if>
    <if test="deprecated != null">
      AND c.deprecated IS <if test="deprecated">NOT</if> NULL
    </if>
    ORDER BY <if test="query != null" >ts_rank_cd(c.fulltext_search, query) DESC,</if> c.created DESC, c.key
    <if test="page != null">
      LIMIT #{page.limit} OFFSET #{page.offset}
    </if>
  </select>

  <select id="count" resultType="Long">
    SELECT COUNT(*)
    FROM concept c
    <if test="query != null" >
      JOIN to_tsquery('english',regexp_replace(unaccent(trim(#{query})),'\s+',':*&amp;')||':*') AS query ON query @@ fulltext_search
    </if>
    WHERE c.deleted IS NULL
    <if test="vocabularyKey != null">
      AND c.vocabulary_key = #{vocabularyKey}
    </if>
    <if test="parentKey != null">
      AND c.parent_key = #{parentKey}
    </if>
    <if test="replacedByKey != null">
      AND c.replaced_by_key = #{replacedByKey}
    </if>
    <if test="name != null">
      AND c.name = #{name}
    </if>
  </select>

  <select id="suggest" resultType="KeyNameResult">
    SELECT key, name
    FROM (
      (SELECT key, name
       FROM concept
       WHERE vocabulary_key = #{vocabularyKey} AND name ilike #{query}||'%' AND deleted IS NULL AND deprecated IS NULL
       ORDER BY name LIMIT 20
      )
    UNION ALL
      (SELECT key, name
       FROM concept
       WHERE vocabulary_key = #{vocabularyKey} AND name ilike '%'||#{query}||'%' AND NOT name ilike #{query}||'%' AND deleted IS NULL AND deprecated IS NULL
       ORDER BY name LIMIT 20
      )
    ) t1 LIMIT 20
  </select>

  <update id="updateParent">
    UPDATE concept
    SET parent_key = #{parentKey}
    WHERE key IN
    <foreach collection="keys" item="key" separator="," open="(" close=")">
      #{key}
    </foreach>
  </update>

  <select id="findSimilarities" resultType="KeyNameResult">
    SELECT key, name
    FROM concept
    WHERE vocabulary_key = #{vocabularyKey}
      AND #{values, typeHandler=StringArrayTypeHandler} &amp;&amp; array_append(avals(label)||avals(alternative_labels)||avals(misspelt_labels), name)
      <if test="conceptKey != null">
        AND key != #{conceptKey}
      </if>
    LIMIT 3
  </select>

  <select id="findReplacement" resultType="Integer">
    WITH RECURSIVE t(key, replaced, deprecated) AS (
      SELECT root.key, root.replaced_by_key, root.deprecated
      FROM concept root
      WHERE key = #{key,jdbcType=INTEGER} AND deprecated IS NOT NULL AND replaced_by_key IS NOT NULL AND deleted IS NULL
    UNION
      SELECT replacement.key, replacement.replaced_by_key, replacement.deprecated
      FROM t conc, concept replacement
      WHERE conc.replaced = replacement.key
    )
    SELECT key FROM t WHERE deprecated IS NULL;
  </select>

  <select id="getVocabularyKey" resultType="Integer">
    SELECT vocabulary_key
    FROM concept
    WHERE key = #{key,jdbcType=INTEGER}
  </select>

  <select id="isDeprecated" resultType="Boolean">
    SELECT case when count(*) > 0 then 1 else 0 end
    FROM concept
    WHERE key = #{key,jdbcType=INTEGER} AND deprecated IS NOT NULL
  </select>

</mapper>