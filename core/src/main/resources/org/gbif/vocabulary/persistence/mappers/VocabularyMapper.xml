<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.gbif.vocabulary.persistence.mappers.VocabularyMapper">

  <resultMap id="VOCABULARY_MAP" type="Vocabulary" autoMapping="true">
    <id property="key" column="key"/>
    <result property="label" column="label" typeHandler="ValueByLanguageMapTypeHandler"/>
    <result property="definition" column="definition" typeHandler="ValueByLanguageMapTypeHandler"/>
    <result property="externalDefinitions" column="external_definition_urls" typeHandler="UriArrayTypeHandler"/>
    <result property="editorialNotes" column="editorial_notes" typeHandler="StringArrayTypeHandler"/>
  </resultMap>

  <sql id="VOCABULARY_READ_FIELDS">
    v.key, v.namespace, v.name, v.label, v.definition, v.external_definition_urls, v.editorial_notes, v.replaced_by_key,
    v.deprecated_by, v.deprecated, v.created_by, v.modified_by, v.created, v.modified, v.deleted
  </sql>

  <sql id="VOCABULARY_INSERT_FIELDS">
    namespace, name, label, definition, external_definition_urls, editorial_notes, created_by, modified_by, created, modified
  </sql>

  <sql id="VOCABULARY_INSERT_PARAMS">
    #{namespace,jdbcType=VARCHAR},
    #{name,jdbcType=VARCHAR},
    #{label,jdbcType=OTHER,typeHandler=ValueByLanguageMapTypeHandler}::jsonb,
    #{definition,jdbcType=OTHER,typeHandler=ValueByLanguageMapTypeHandler}::jsonb,
    #{externalDefinitions,jdbcType=ARRAY,typeHandler=UriArrayTypeHandler},
    #{editorialNotes,jdbcType=ARRAY,typeHandler=StringArrayTypeHandler},
    #{createdBy,jdbcType=VARCHAR},
    #{modifiedBy,jdbcType=VARCHAR},
    now(), <!-- created -->
    now() <!-- modified -->
  </sql>

  <sql id="VOCABULARY_PARAMS_UPDATE">
    namespace = #{namespace,jdbcType=VARCHAR},
    name = #{name,jdbcType=VARCHAR},
    label = #{label,jdbcType=OTHER,typeHandler=ValueByLanguageMapTypeHandler}::jsonb,
    definition = #{definition,jdbcType=OTHER,typeHandler=ValueByLanguageMapTypeHandler}::jsonb,
    external_definition_urls = #{externalDefinitions,jdbcType=ARRAY,typeHandler=UriArrayTypeHandler},
    editorial_notes = #{editorialNotes,jdbcType=ARRAY,typeHandler=StringArrayTypeHandler},
    modified_by = #{modifiedBy,jdbcType=VARCHAR},
    modified = now(),
    deleted = null <!-- if we're updating it can't be deleted -->
  </sql>

  <!-- QUERIES FROM HERE -->

  <insert id="create" useGeneratedKeys="true" keyProperty="key" keyColumn="key">
    INSERT INTO vocabulary(<include refid="VOCABULARY_INSERT_FIELDS"/>)
    VALUES(<include refid="VOCABULARY_INSERT_PARAMS"/>)
  </insert>

  <update id="update">
    UPDATE vocabulary
    SET
    <include refid="VOCABULARY_PARAMS_UPDATE"/>
    WHERE key = #{key,jdbcType=BIGINT} AND deleted IS NULL
  </update>

  <select id="get" resultMap="VOCABULARY_MAP">
    SELECT
    <include refid="VOCABULARY_READ_FIELDS"/>
    FROM vocabulary v
    WHERE v.key = #{key,jdbcType=BIGINT}
  </select>

  <select id="getByName" resultMap="VOCABULARY_MAP">
    SELECT
    <include refid="VOCABULARY_READ_FIELDS"/>
    FROM vocabulary v
    WHERE v.name = #{name,jdbcType=VARCHAR}
  </select>

  <select id="list" resultType="Vocabulary" resultMap="VOCABULARY_MAP">
    SELECT
    <include refid="VOCABULARY_READ_FIELDS"/>
    FROM vocabulary v
    <if test="params.query != null">
      JOIN to_tsquery('english',regexp_replace(unaccent(trim(#{params.query})),'\s+',':*&amp;')||':*') AS query ON query @@ fulltext_search
    </if>
    WHERE v.deleted IS NULL
    <if test="params.deprecated != null">
      AND v.deprecated IS <if test="params.deprecated">NOT</if> NULL
    </if>
    <if test="params.name != null">
      AND v.name = #{params.name}
    </if>
    <if test="params.namespace != null">
      AND v.namespace = #{params.namespace}
    </if>
    <if test="params.key != null">
      AND v.key = #{params.key}
    </if>
    ORDER BY <if test="params.query != null">ts_rank_cd(v.fulltext_search, query) DESC,</if> v.created DESC, v.key
    <if test="page != null">
      LIMIT #{page.limit} OFFSET #{page.offset}
    </if>
  </select>

  <select id="count" resultType="Long">
    SELECT COUNT(*)
    FROM vocabulary v
    <if test="params.query != null">
      JOIN to_tsquery('english',regexp_replace(unaccent(trim(#{params.query})),'\s+',':*&amp;')||':*') AS query ON query @@ fulltext_search
    </if>
    WHERE v.deleted IS NULL
    <if test="params.deprecated != null">
      AND v.deprecated IS <if test="params.deprecated">NOT</if> NULL
    </if>
    <if test="params.name != null">
      AND v.name = #{params.name}
    </if>
    <if test="params.namespace != null">
      AND v.namespace = #{params.namespace}
    </if>
    <if test="params.key != null">
      AND v.key = #{params.key}
    </if>
  </select>

  <select id="suggest" resultType="KeyNameResult">
    SELECT key, name
    FROM (
    (SELECT key, name
    FROM vocabulary
    WHERE name ilike #{query}||'%' AND deleted IS NULL AND deprecated IS NULL
    ORDER BY name LIMIT 20
    )
    UNION ALL
    (SELECT key, name
    FROM vocabulary
    WHERE name ilike '%'||#{query}||'%' AND NOT name ilike #{query}||'%' AND deleted IS NULL AND deprecated IS NULL
    ORDER BY name LIMIT 20
    )
    ) t1 LIMIT 20
  </select>

  <select id="findSimilarities" resultType="KeyNameResult">
    SELECT key, name
    FROM vocabulary
    <where>
      <if test="vocabularyKey != null">
        key != #{vocabularyKey}
      </if>
      AND
      <foreach collection="normalizedValues" item="v" separator=" OR " open="(" close=")">
        normalized_values::jsonb->#{v.node} ??| #{v.values, typeHandler=StringArrayTypeHandler}
      </foreach>
    </where>
    LIMIT 3
  </select>

  <update id="deprecate">
    UPDATE vocabulary
    SET deprecated = now(),
    deprecated_by = #{deprecatedBy,jdbcType=VARCHAR}
    <choose>
      <when test="replacementKey != null">
        ,replaced_by_key=#{replacementKey,jdbcType=BIGINT}
      </when>
      <otherwise>
        ,replaced_by_key=null
      </otherwise>
    </choose>
    WHERE key = #{key,jdbcType=BIGINT} AND deleted IS NULL
  </update>

  <update id="restoreDeprecated">
    UPDATE vocabulary
    SET deprecated = null, deprecated_by = null, replaced_by_key = null
    WHERE key = #{key,jdbcType=BIGINT} AND deleted IS NULL
  </update>

  <select id="isDeprecated" resultType="Boolean">
    SELECT case when count(*) > 0 then 1 else 0 end
    FROM vocabulary
    WHERE key = #{key,jdbcType=BIGINT} AND deprecated IS NOT NULL
  </select>

</mapper>