<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.gbif.vocabulary.persistence.mappers.ConceptMapper">

  <resultMap id="CONCEPT_MAP" type="Concept" autoMapping="true">
    <id property="key" column="key"/>
    <result property="externalDefinitions" column="external_definition_urls" typeHandler="UriArrayTypeHandler"/>
    <result property="sameAsUris" column="same_as_uris" typeHandler="UriArrayTypeHandler"/>
    <result property="editorialNotes" column="editorial_notes" typeHandler="StringArrayTypeHandler"/>
    <collection property="tags" column="key" select="listTags"/>
    <collection property="definition" column="key" select="listConceptDefinitions"/>
    <collection property="label" column="{entityKey=key}" select="listConceptLabels"/>
  </resultMap>

  <resultMap id="SUGGEST_RESULT_MAP" type="SuggestDto" autoMapping="true">
    <id property="key" column="key"/>
    <collection property="parentDtos" column="{key=key,lang=langParam,fallbackLang=fallbackLangParam}"
                select="findParentsLabels"/>
  </resultMap>

  <resultMap id="DEFINITION_RESULT_MAP" type="Definition" autoMapping="true">
    <id property="key" column="key"/>
    <result property="language" column="language" typeHandler="LanguageRegionTypeHandler"/>
  </resultMap>

  <resultMap id="LABEL_RESULT_MAP" type="Label" autoMapping="true">
    <id property="key" column="key"/>
    <result property="language" column="language" typeHandler="LanguageRegionTypeHandler"/>
  </resultMap>

  <resultMap id="PARENT_RESULT_MAP" type="ParentDto" autoMapping="true">
    <id property="key" column="key"/>
    <result property="labelLanguage" column="labelLanguage" typeHandler="LanguageRegionTypeHandler"/>
    <result property="fallbackLabelLanguage" column="fallbackLabelLanguage" typeHandler="LanguageRegionTypeHandler"/>
  </resultMap>

  <resultMap id="HIDDEN_LABEL_RESULT_MAP" type="HiddenLabel" autoMapping="true">
    <id property="key" column="key"/>
    <result property="entityKey" column="concept_key"/>
  </resultMap>

  <sql id="CONCEPT_READ_FIELDS">
    c.key, c.vocabulary_key, c.parent_key, c.replaced_by_key, c.name, c.external_definition_urls,
    c.same_as_uris, c.editorial_notes, c.deprecated_by, c.deprecated, c.created_by, c.modified_by, c.created,
    c.modified
  </sql>

  <sql id="CONCEPT_INSERT_FIELDS">
    vocabulary_key, parent_key, name, external_definition_urls, same_as_uris, editorial_notes, created_by,
    modified_by, created, modified
  </sql>

  <sql id="CONCEPT_INSERT_PARAMS">
    #{vocabularyKey,jdbcType=BIGINT},
    #{parentKey,jdbcType=BIGINT},
    #{name,jdbcType=VARCHAR},
    #{externalDefinitions,jdbcType=ARRAY,typeHandler=UriArrayTypeHandler},
    #{sameAsUris,jdbcType=ARRAY,typeHandler=UriArrayTypeHandler},
    #{editorialNotes,jdbcType=ARRAY,typeHandler=StringArrayTypeHandler},
    #{createdBy,jdbcType=VARCHAR},
    #{modifiedBy,jdbcType=VARCHAR},
    now(), <!-- created -->
    now() <!-- modified -->
  </sql>

  <sql id="CONCEPT_UPDATE_PARAMS">
    vocabulary_key = #{vocabularyKey,jdbcType=BIGINT},
    parent_key = #{parentKey,jdbcType=BIGINT},
    replaced_by_key = #{replacedByKey,jdbcType=BIGINT},
    name = #{name,jdbcType=VARCHAR},
    external_definition_urls = #{externalDefinitions,jdbcType=ARRAY,typeHandler=UriArrayTypeHandler},
    same_as_uris = #{sameAsUris,jdbcType=ARRAY,typeHandler=UriArrayTypeHandler},
    editorial_notes = #{editorialNotes,jdbcType=ARRAY,typeHandler=StringArrayTypeHandler},
    modified_by = #{modifiedBy,jdbcType=VARCHAR},
    modified = now(),
    deprecated = null <!-- if we're updating it can't be deprecated -->
  </sql>

  <sql id="FULL_TEXT">
    JOIN to_tsquery('english_nostop',regexp_replace(unaccent(trim(quote_literal(#{params.query}))),'\s+',':*&amp;')||':*') AS query
    ON query @@ fulltext_search
    OR EXISTS(
      SELECT cd.key
      FROM concept_definition${table_suffix} cd
      WHERE cd.concept_key = c.key AND query @@ cd.fulltext_search
    )
    OR EXISTS(
      SELECT cl.key
      FROM concept_label${table_suffix} cl
      WHERE cl.concept_key = c.key AND query @@ cl.fulltext_search
    )
    OR EXISTS(
      SELECT cal.key
      FROM concept_alternative_label${table_suffix} cal
      WHERE cal.concept_key = c.key AND query @@ cal.fulltext_search
    )
    OR EXISTS(
      SELECT chl.key
      FROM concept_hidden_label${table_suffix} chl
      WHERE chl.concept_key = c.key AND query @@ chl.fulltext_search
    )
  </sql>

  <sql id="LIST_COMMON">
    <if test="params.parent != null">
      INNER JOIN concept parent ON parent.key = c.parent_key
    </if>
    <if test="params.hiddenLabel != null">
      INNER JOIN concept_hidden_label chl ON chl.concept_key = c.key
    </if>
    <where>
      <if test="params.vocabularyKey != null">
        c.vocabulary_key = #{params.vocabularyKey}
      </if>
      <if test="params.parentKey != null">
        AND c.parent_key = #{params.parentKey}
      </if>
      <if test="params.replacedByKey != null">
        AND c.replaced_by_key = #{params.replacedByKey}
      </if>
      <if test="params.name != null">
        AND c.name = #{params.name}
      </if>
      <if test="params.deprecated != null">
        AND c.deprecated IS <if test="params.deprecated">NOT</if> NULL
      </if>
      <if test="params.key != null">
        AND c.key = #{params.key}
      </if>
      <if test="params.hasParent != null">
        AND c.parent_key IS <if test="params.hasParent">NOT</if> NULL
      </if>
      <if test="params.hasReplacement != null">
        AND c.replaced_by_key IS <if test="params.hasReplacement">NOT</if> NULL
      </if>
      <if test="params.parent != null">
        AND parent.name = #{params.parent}
      </if>
      <if test="params.tags != null">
        AND
        <foreach item="item" collection="params.tags" open="(" separator=" AND " close=")">
          EXISTS (SELECT * FROM tag t INNER JOIN concept_tag ct ON ct.concept_key = c.key AND t.key = ct.tag_key WHERE
          t.name = #{item,jdbcType=VARCHAR})
        </foreach>
      </if>
      <if test="params.hiddenLabel != null">
        AND chl.value = #{params.hiddenLabel}
      </if>
    </where>
  </sql>

  <sql id="SUGGEST">
    SELECT * FROM (
    SELECT DISTINCT ON(key) key, name, label, labelLang, score
      <if test="_parameter.containsKey('lang')">,#{lang} langParam</if>
      <if test="_parameter.containsKey('fallbackLang')">,#{fallbackLang} fallbackLangParam</if>
      <if test="_parameter.containsKey('vocabName')">, #{vocabName} vocabName</if>
    FROM (
    (
      <include refid="SUGGEST_LANG_Q">
        <property name="q" value="normalize_suggest(cl.value) = normalize_suggest(#{query})"/>
        <property name="score" value="100"/>
      </include>
    )
    <if test="lang != null and fallbackLang != null">
      UNION ALL
      (
        <include refid="SUGGEST_FALLBACK_Q">
          <property name="q" value="normalize_suggest(cl.value) = normalize_suggest(#{query})"/>
          <property name="score" value="100"/>
        </include>
      )
    </if>
    UNION ALL
    (
      <include refid="SUGGEST_NAME_Q">
        <property name="q" value="normalize_suggest(c.name) = normalize_suggest(#{query})"/>
        <property name="score" value="100"/>
      </include>
    )
    UNION ALL
    (
      <include refid="SUGGEST_LANG_Q">
        <property name="q" value="normalize_suggest(cl.value) ilike normalize_suggest(#{query})||'%'"/>
        <property name="score" value="70"/>
      </include>
    )
    <if test="lang != null and fallbackLang != null">
      UNION ALL
      (
        <include refid="SUGGEST_FALLBACK_Q">
          <property name="q" value="normalize_suggest(cl.value) ilike  normalize_suggest(#{query})||'%'"/>
          <property name="score" value="70"/>
        </include>
      )
    </if>
    UNION ALL
    (
      <include refid="SUGGEST_NAME_Q">
        <property name="q" value="normalize_suggest(c.name) ilike normalize_suggest(#{query})||'%'"/>
        <property name="score" value="70"/>
      </include>
    )
    UNION ALL
    (
      <include refid="SUGGEST_LANG_Q">
        <property name="q" value="normalize_suggest(cl.value) ilike '%'||normalize_suggest(#{query})||'%'
                                AND NOT normalize_suggest(cl.value) ilike normalize_suggest(#{query})||'%'"/>
        <property name="score" value="50"/>
      </include>
    )
    <if test="lang != null and fallbackLang != null">
      UNION ALL
      (
        <include refid="SUGGEST_FALLBACK_Q">
          <property name="q" value="normalize_suggest(cl.value) ilike '%'||normalize_suggest(#{query})||'%'
                          AND NOT normalize_suggest(cl.value) ilike normalize_suggest(#{query})||'%'"/>
          <property name="score" value="50"/>
        </include>
      )
    </if>
    UNION ALL
    (
      <include refid="SUGGEST_NAME_Q">
        <property name="q" value="normalize_suggest(c.name) ilike '%'||normalize_suggest(#{query})||'%'
                          AND NOT normalize_suggest(c.name) ilike normalize_suggest(#{query})||'%'"/>
        <property name="score" value="50"/>
      </include>
     )
    ) t1
    ) t2 ORDER BY score DESC, name LIMIT #{limit}
  </sql>

  <sql id="SUGGEST_LANG_Q">
    SELECT c.key AS key, c.name AS name, cl.value AS label, cl.language AS labelLang, ${score} AS score
    FROM concept${table_suffix} c
    INNER JOIN concept_label${table_suffix} cl ON cl.concept_key = c.key
    WHERE c.vocabulary_key = #{vocabularyKey} AND c.deprecated IS NULL
    AND ${q} <if test="lang != null">AND cl.language = #{lang}</if>
  </sql>

  <sql id="SUGGEST_FALLBACK_Q">
    SELECT c.key AS key, c.name AS name, cl.value AS label, cl.language AS labelLang, ${score} AS score
    FROM concept${table_suffix} c
    INNER JOIN concept_label${table_suffix} cl ON cl.concept_key = c.key
    WHERE c.vocabulary_key = #{vocabularyKey} AND c.deprecated IS NULL
    AND ${q} AND cl.language = #{fallbackLang}
    AND NOT EXISTS (
    SELECT * FROM concept_label cl2 WHERE cl2.concept_key = c.key AND cl2.language = #{lang}
    )
  </sql>

  <sql id="SUGGEST_NAME_Q">
    SELECT c.key AS key, c.name AS name, NULL AS label, NULL AS labelLang, ${score} AS score
    FROM concept${table_suffix} c
    WHERE c.vocabulary_key = #{vocabularyKey} AND c.deprecated IS NULL
    AND ${q}
    <if test="lang != null">
      AND NOT EXISTS (
      SELECT * FROM concept_label cl WHERE cl.concept_key = c.key
      AND cl.language IN (#{lang}<if test="fallbackLang != null">,#{fallbackLang}</if>)
      )
    </if>
  </sql>

  <sql id="COUNT_CHILDREN">
    SELECT c.parent_key as parentKey, c.name as childName FROM concept${table_suffix} c WHERE c.parent_key IN
    <foreach collection="parentConcepts" item="key" separator="," open="(" close=")">
      #{key}
    </foreach>
  </sql>

  <sql id="FIND_PARENTS">
    WITH RECURSIVE parents(key, name, parent_key, deprecated) AS (
      SELECT root.key, root.name, root.parent_key, root.deprecated
      FROM concept${table_suffix} root
      WHERE key = #{key,jdbcType=BIGINT} AND deprecated IS NULL AND parent_key IS NOT NULL
      UNION
      SELECT c.key, c.name, c.parent_key, c.deprecated
      FROM parents p, concept${table_suffix} c
      WHERE p.parent_key = c.key )
    SELECT name FROM parents WHERE key != #{key,jdbcType=BIGINT};
  </sql>

  <select id="findParentsLabels" resultMap="PARENT_RESULT_MAP">
    <bind name="table_suffix" value="''"/>
    <include refid="FIND_PARENTS_LABELS"/>
  </select>

  <sql id="FIND_PARENTS_LABELS">
    WITH RECURSIVE parents(key, name, parent_key, deprecated) AS (
    SELECT root.key, root.name, root.parent_key, root.deprecated, 0 AS depth
    FROM concept${table_suffix} root
    WHERE key = #{key,jdbcType=BIGINT} AND deprecated IS NULL AND parent_key IS NOT NULL
    UNION
    SELECT c.key, c.name, c.parent_key, c.deprecated, p.depth + 1
    FROM parents p, concept${table_suffix} c
    WHERE p.parent_key = c.key )
    SELECT p.key, p.name, p.depth
      <if test="lang != null">, cl.value AS label, cl.language AS labelLanguage</if>
      <if test="fallbackLang != null">, clf.value AS fallbackLabel, clf.language AS fallbackLabelLanguage</if>
    FROM parents p
    <if test="lang != null">
      LEFT JOIN concept_label${table_suffix} cl ON cl.concept_key = p.key AND cl.language = #{lang}
    </if>
    <if test="fallbackLang != null">
      LEFT JOIN concept_label${table_suffix} clf ON clf.concept_key = p.key AND clf.language = #{fallbackLang}
    </if>
    WHERE p.key != #{key,jdbcType=BIGINT};
  </sql>

  <sql id="LIST_CONCEPTS_DEFINITION">
    SELECT key, language, value, created_by, created, modified_by, modified
    FROM concept_definition${table_suffix}
    WHERE concept_key = #{entityKey,jdbcType=BIGINT}
    ORDER BY key DESC
  </sql>

  <sql id="LIST_CONCEPTS_LABELS">
    SELECT <include refid="LABEL_FIELDS"/>
    FROM concept_label${table_suffix}
    <where>
      concept_key = #{entityKey,jdbcType=BIGINT}
    </where>
    ORDER BY key DESC
  </sql>

  <sql id="LIST_DEFINITIONS">
    SELECT key, language, value, created_by, created, modified_by, modified
    FROM concept_definition${table_suffix}
    WHERE concept_key = #{entityKey,jdbcType=BIGINT}
    <if test="langs != null">
      AND language IN
      <foreach item="item" collection="langs" open="(" separator="," close=")">
        #{item}
      </foreach>
    </if>
    ORDER BY key DESC
  </sql>

  <sql id="LIST_LABELS">
    SELECT <include refid="LABEL_FIELDS"/>
    FROM concept_label${table_suffix}
    WHERE concept_key = #{entityKey,jdbcType=BIGINT}
    <if test="langs != null">
      AND language IN
      <foreach item="item" collection="langs" open="(" separator="," close=")">
        #{item}
      </foreach>
    </if>
    ORDER BY key DESC
  </sql>

  <sql id="LIST_ALTERNATIVE_LABELS">
    SELECT <include refid="LABEL_FIELDS"/>
    FROM concept_alternative_label${table_suffix}
    WHERE concept_key = #{entityKey,jdbcType=BIGINT}
    <if test="langs != null">
      AND language IN
      <foreach item="item" collection="langs" open="(" separator="," close=")">
        #{item}
      </foreach>
    </if>
    ORDER BY created DESC
    <if test="page != null">
      LIMIT #{page.limit} OFFSET #{page.offset}
    </if>
  </sql>

  <sql id="LIST_HIDDEN_LABELS">
    SELECT key, value, created_by, created
    FROM concept_hidden_label${table_suffix}
    WHERE concept_key = #{entityKey,jdbcType=BIGINT}
    ORDER BY created DESC
    <if test="page != null">
      LIMIT #{page.limit} OFFSET #{page.offset}
    </if>
  </sql>

  <sql id="COUNT_ALTERNATIVE_LABELS">
    SELECT COUNT(DISTINCT key)
    FROM concept_alternative_label${table_suffix}
    WHERE concept_key = #{entityKey,jdbcType=BIGINT}
    <if test="langs != null">
      AND language IN
      <foreach item="item" collection="langs" open="(" separator="," close=")">
        #{item}
      </foreach>
    </if>
  </sql>

  <sql id="COUNT_HIDDEN_LABELS">
    SELECT COUNT(DISTINCT key)
    FROM concept_hidden_label${table_suffix}
    WHERE concept_key = #{entityKey,jdbcType=BIGINT}
  </sql>

  <!-- QUERIES FROM HERE -->

  <insert id="create" useGeneratedKeys="true" keyProperty="key" keyColumn="key">
    INSERT INTO concept(<include refid="CONCEPT_INSERT_FIELDS"/>) VALUES(<include refid="CONCEPT_INSERT_PARAMS"/>)
  </insert>

  <update id="update">
    UPDATE concept SET
    <include refid="CONCEPT_UPDATE_PARAMS"/>
    WHERE key = #{key,jdbcType=BIGINT} AND deprecated IS NULL
  </update>

  <select id="get" resultMap="CONCEPT_MAP">
    SELECT
    <include refid="CONCEPT_READ_FIELDS"/>
    FROM concept c WHERE c.key = #{key,jdbcType=BIGINT}
  </select>

  <select id="getByNameAndVocabulary" resultMap="CONCEPT_MAP">
    SELECT
    <include refid="CONCEPT_READ_FIELDS"/>
    FROM concept c INNER JOIN vocabulary v on v.key = c.vocabulary_key
    WHERE c.name = #{name,jdbcType=VARCHAR} and
    v.name = #{vocabularyName,jdbcType=VARCHAR}
  </select>

  <update id="deprecate">
    UPDATE concept SET deprecated = now(), deprecated_by = #{deprecatedBy,jdbcType=VARCHAR}
    <choose>
      <when test="replacementKey != null">
        ,replaced_by_key=#{replacementKey,jdbcType=BIGINT}
      </when>
      <otherwise>
        ,replaced_by_key=null
      </otherwise>
    </choose>
    WHERE key = #{key,jdbcType=BIGINT} AND deprecated IS NULL
  </update>

  <update id="deprecateInBulk">
    UPDATE concept SET deprecated = now(), deprecated_by = #{deprecatedBy,jdbcType=VARCHAR}
    <choose>
      <when test="replacementKey != null">
        ,replaced_by_key=#{replacementKey,jdbcType=BIGINT}
      </when>
      <otherwise>
        ,replaced_by_key=null
      </otherwise>
    </choose>
    WHERE deprecated IS NULL AND key IN
    <foreach collection="keys" item="key" separator="," open="(" close=")">
      #{key}
    </foreach>
  </update>

  <update id="restoreDeprecated">
    UPDATE concept
    SET deprecated = null, deprecated_by = null, replaced_by_key = null
    WHERE key = #{key,jdbcType=BIGINT} AND deprecated IS NOT NULL
  </update>

  <update id="restoreDeprecatedInBulk">
    UPDATE concept
    SET deprecated = null, deprecated_by = null, replaced_by_key = null
    WHERE deprecated IS NOT NULL AND key IN
    <foreach collection="keys" item="key" separator="," open="(" close=")">
      #{key}
    </foreach>
  </update>

  <select id="list" resultType="Concept" resultMap="CONCEPT_MAP">
    SELECT DISTINCT ON (<if test="params.query != null">ts_rank_cd(c.fulltext_search, query),</if> c.created, c.key)
    <include refid="CONCEPT_READ_FIELDS"/>
    FROM concept c
    <if test="params.query != null">
      <bind name="table_suffix" value="''"/>
      <include refid="FULL_TEXT"/>
    </if>
    <include refid="LIST_COMMON"/>
    ORDER BY <if test="params.query != null">ts_rank_cd(c.fulltext_search, query) DESC,</if> c.created DESC, c.key
    <if test="page != null">
      LIMIT #{page.limit} OFFSET #{page.offset}
    </if>
  </select>

  <select id="count" resultType="Long">
    SELECT COUNT(DISTINCT c.key) FROM concept c
    <if test="params.query != null">
      <bind name="table_suffix" value="''"/>
      <include refid="FULL_TEXT"/>
    </if>
    <include refid="LIST_COMMON"/>
  </select>

  <select id="suggest" resultMap="SUGGEST_RESULT_MAP">
    <bind name="table_suffix" value="''"/>
    <include refid="SUGGEST"/>
  </select>

  <update id="updateParent">
    UPDATE concept SET parent_key = #{parentKey} WHERE key IN
    <foreach collection="keys" item="key" separator="," open="(" close=")">
      #{key}
    </foreach>
  </update>

  <select id="findSimilarities" resultType="KeyNameResult">
    SELECT DISTINCT ON (c.key) c.key, c.name FROM concept c LEFT JOIN concept_label cl ON cl.concept_key = c.key
    <if test="lang != null">AND cl.language = #{lang}</if>
    LEFT JOIN concept_alternative_label cal ON cal.concept_key = c.key
    <if test="lang != null">AND cal.language = #{lang}</if>
    LEFT JOIN concept_hidden_label chl ON chl.concept_key = c.key
    <where>
      c.vocabulary_key = #{vocabularyKey}
      <if test="conceptKey != null">
        AND c.key != #{conceptKey}
      </if>
      AND (
        normalize_name(c.name) = #{normalizedValue,jdbcType=VARCHAR}
        OR cl.normalized_value = #{normalizedValue,jdbcType=VARCHAR}
        OR cal.normalized_value = #{normalizedValue,jdbcType=VARCHAR}
        OR chl.normalized_value = #{normalizedValue,jdbcType=VARCHAR})
    </where>
    LIMIT 3
  </select>

  <select id="findReplacement" resultType="Long">
    WITH RECURSIVE replacements(key, replaced_by, deprecated) AS (
      SELECT root.key, root.replaced_by_key, root.deprecated
      FROM concept root
      WHERE key = #{key,jdbcType=BIGINT} AND deprecated IS NOT NULL AND replaced_by_key IS NOT NULL
    UNION
      SELECT c.key, c.replaced_by_key, c.deprecated
      FROM replacements r, concept c
      WHERE r.replaced_by = c.key )
    SELECT key FROM replacements WHERE deprecated IS NULL;
  </select>

  <select id="findParents" resultType="String">
    <bind name="table_suffix" value="''"/>
    <include refid="FIND_PARENTS"/>
  </select>

  <select id="getVocabularyKey" resultType="Long">
    SELECT vocabulary_key FROM concept WHERE key = #{key,jdbcType=BIGINT}
  </select>

  <select id="isDeprecated" resultType="Boolean">
    SELECT case when count(*) > 0 then 1 else 0 end FROM concept WHERE key = #{key,jdbcType=BIGINT} AND deprecated IS
    NOT NULL
  </select>

  <select id="countChildren" resultType="ChildrenResult">
    <bind name="table_suffix" value="''"/>
    <include refid="COUNT_CHILDREN"/>
  </select>

  <!-- TAGS -->
  <sql id="LIST_TAGS">
    SELECT
    <include refid="org.gbif.vocabulary.persistence.mappers.TagMapper.TAG_READ_FIELDS"/>
    FROM tag${table_suffix} t INNER JOIN concept_tag${table_suffix} ct ON ct.tag_key = t.key
    WHERE ct.concept_key = #{key,jdbcType=BIGINT}
  </sql>

  <select id="listTags" resultMap="org.gbif.vocabulary.persistence.mappers.TagMapper.TAG_MAP">
    <bind name="table_suffix" value="''"/>
    <include refid="LIST_TAGS"/>
  </select>

  <select id="listTagsLatestRelease" resultMap="org.gbif.vocabulary.persistence.mappers.TagMapper.TAG_MAP">
    <bind name="table_suffix" value="'_' + _parameter.vocabName + '_latest_release_mv'"/>
    <include refid="LIST_TAGS"/>
  </select>

  <insert id="addTag">
    INSERT INTO concept_tag(concept_key, tag_key) VALUES( #{conceptKey,jdbcType=BIGINT}, #{tagKey,jdbcType=INTEGER} )
  </insert>

  <delete id="removeTag">
    DELETE FROM concept_tag WHERE concept_key = #{conceptKey,jdbcType=BIGINT} AND tag_key = #{tagKey,jdbcType=INTEGER}
  </delete>

  <delete id="deleteAllConcepts">
    DELETE FROM concept WHERE vocabulary_key = #{vocabularyKey}
  </delete>

  <!-- definitions -->
  <insert id="addDefinition" useGeneratedKeys="true" keyProperty="definition.key" keyColumn="key">
    INSERT INTO concept_definition(concept_key, language, value, created_by, modified_by, created, modified)
    VALUES(#{entityKey,jdbcType=BIGINT},
    #{definition.language,jdbcType=VARCHAR},
    #{definition.value,jdbcType=VARCHAR},
    #{definition.createdBy,jdbcType=VARCHAR},
    #{definition.modifiedBy,jdbcType=VARCHAR},
    now(), <!-- created -->
    now() <!-- modified -->)
  </insert>

  <update id="updateDefinition">
    UPDATE concept_definition
    SET value = #{definition.value,jdbcType=VARCHAR},
    modified = now()
    WHERE key = #{definition.key,jdbcType=BIGINT} AND concept_key = #{entityKey,jdbcType=BIGINT}
  </update>

  <delete id="deleteDefinition">
    DELETE FROM concept_definition WHERE key = #{key,jdbcType=BIGINT} AND concept_key = #{entityKey,jdbcType=BIGINT}
  </delete>

  <select id="listDefinitions" resultMap="DEFINITION_RESULT_MAP">
    <bind name="table_suffix" value="''"/>
    <include refid="LIST_DEFINITIONS"/>
  </select>

  <select id="listConceptDefinitions" resultMap="DEFINITION_RESULT_MAP">
    <bind name="table_suffix" value="''"/>
    <include refid="LIST_CONCEPTS_DEFINITION"/>
  </select>

  <select id="getDefinition" resultMap="DEFINITION_RESULT_MAP">
    SELECT key, language, value, created_by, created, modified_by, modified
    FROM concept_definition
    WHERE key = #{key,jdbcType=BIGINT} AND concept_key = #{entityKey,jdbcType=BIGINT}
  </select>

  <!-- labels -->
  <sql id="LABEL_FIELDS">
    key, language, value, created_by, created
  </sql>

  <insert id="addLabel" useGeneratedKeys="true" keyProperty="label.key" keyColumn="key">
    INSERT INTO concept_label(concept_key, language, value, created_by, created)
    VALUES(#{entityKey,jdbcType=BIGINT},
           #{label.language,jdbcType=VARCHAR},
           #{label.value,jdbcType=VARCHAR},
           #{label.createdBy,jdbcType=VARCHAR},
           now() <!-- created -->)
  </insert>

  <delete id="deleteLabel">
    DELETE FROM concept_label WHERE key = #{key,jdbcType=BIGINT}
  </delete>

  <select id="listLabels" resultMap="LABEL_RESULT_MAP">
    <bind name="table_suffix" value="''"/>
    <include refid="LIST_LABELS"/>
  </select>

  <select id="listConceptLabels" resultMap="LABEL_RESULT_MAP">
    <bind name="table_suffix" value="''"/>
    <include refid="LIST_CONCEPTS_LABELS"/>
  </select>

  <!-- alternative labels -->
  <insert id="addAlternativeLabel" useGeneratedKeys="true" keyProperty="label.key" keyColumn="key">
    INSERT INTO concept_alternative_label(concept_key, language, value, created_by, created)
    VALUES(#{entityKey,jdbcType=BIGINT},
           #{label.language,jdbcType=VARCHAR},
           #{label.value,jdbcType=VARCHAR},
           #{label.createdBy,jdbcType=VARCHAR},
           now() <!-- created -->)
  </insert>

  <delete id="deleteAlternativeLabel">
    DELETE FROM concept_alternative_label WHERE key = #{key,jdbcType=BIGINT} AND concept_key = #{entityKey,jdbcType=BIGINT}
  </delete>

  <select id="listAlternativeLabels" resultMap="LABEL_RESULT_MAP">
    <bind name="table_suffix" value="''"/>
    <include refid="LIST_ALTERNATIVE_LABELS"/>
  </select>

  <select id="countAlternativeLabels" resultType="Long">
    <bind name="table_suffix" value="''"/>
    <include refid="COUNT_ALTERNATIVE_LABELS"/>
  </select>

  <!-- hidden labels -->
  <insert id="addHiddenLabel" useGeneratedKeys="true" keyProperty="label.key" keyColumn="key">
    INSERT INTO concept_hidden_label(concept_key, value, created_by, created)
    VALUES(#{entityKey,jdbcType=BIGINT},
           #{label.value,jdbcType=VARCHAR},
           #{label.createdBy,jdbcType=VARCHAR},
           now() <!-- created -->)
  </insert>

  <delete id="deleteHiddenLabel">
    DELETE FROM concept_hidden_label WHERE key = #{key,jdbcType=BIGINT} AND concept_key = #{entityKey,jdbcType=BIGINT}
  </delete>

  <select id="listHiddenLabels" resultMap="HIDDEN_LABEL_RESULT_MAP">
    <bind name="table_suffix" value="''"/>
    <include refid="LIST_HIDDEN_LABELS"/>
  </select>

  <select id="countHiddenLabels" resultType="Long">
    <bind name="table_suffix" value="''"/>
    <include refid="COUNT_HIDDEN_LABELS"/>
  </select>

  <delete id="deleteAllLabels">
    DELETE FROM concept_label cl
    JOIN concept c ON c.key = cl.concept_key
    JOIN vocabulary v ON v.key = c.vocabulary_key
    WHERE v.key = #{key,jdbcType=BIGINT}
  </delete>

  <delete id="deleteAllAlternativeLabels">
    DELETE FROM concept_alternative_label cal
    JOIN concept c ON c.key = cal.concept_key
    JOIN vocabulary v ON v.key = c.vocabulary_key
    WHERE v.key = #{key,jdbcType=BIGINT}
  </delete>

  <delete id="deleteAllHiddenLabels">
    DELETE FROM concept_hidden_label chl
    JOIN concept c ON c.key = chl.concept_key
    JOIN vocabulary v ON v.key = c.vocabulary_key
    WHERE v.key = #{key,jdbcType=BIGINT}
  </delete>

  <!-- latest release views -->
  <select id="existsReleaseView" resultType="java.lang.Boolean">
    SELECT EXISTS (SELECT FROM pg_matviews WHERE matviewname = 'concept_${vocabName}_latest_release_mv')
      AND EXISTS (SELECT FROM pg_matviews WHERE matviewname = 'tag_${vocabName}_latest_release_mv')
  </select>

  <insert id="createLatestReleaseView">
    CREATE MATERIALIZED VIEW IF NOT EXISTS concept_${vocabName}_latest_release_mv AS
    SELECT *
    FROM concept c
    WHERE c.vocabulary_key = ${vocabKey};

    CREATE INDEX IF NOT EXISTS c_${vocabName}_latest_release_mv_fulltext_idx
      ON concept_${vocabName}_latest_release_mv USING gin(fulltext_search);
    CREATE UNIQUE INDEX IF NOT EXISTS c_${vocabName}_latest_release_mv_unique
      ON concept_${vocabName}_latest_release_mv(name);

    CREATE MATERIALIZED VIEW IF NOT EXISTS concept_label_${vocabName}_latest_release_mv AS
    SELECT * FROM concept_label c WHERE c.concept_key IN (SELECT c2.key FROM concept c2 WHERE c2.vocabulary_key = ${vocabKey});
    CREATE INDEX IF NOT EXISTS cl_${vocabName}_latest_release_mv_fulltext_search_idx
      ON concept_label_${vocabName}_latest_release_mv USING gin(fulltext_search);
    CREATE UNIQUE INDEX IF NOT EXISTS cl_${vocabName}_release_mv_unique
      ON concept_label_${vocabName}_latest_release_mv(concept_key, language);

    CREATE MATERIALIZED VIEW IF NOT EXISTS concept_alternative_label_${vocabName}_latest_release_mv AS
    SELECT * FROM concept_alternative_label c WHERE c.concept_key IN (SELECT c2.key FROM concept c2 WHERE c2.vocabulary_key = ${vocabKey});
    CREATE INDEX IF NOT EXISTS cal_${vocabName}_latest_release_mv_fulltext_search_idx
      ON concept_alternative_label_${vocabName}_latest_release_mv USING gin(fulltext_search);
    CREATE UNIQUE INDEX IF NOT EXISTS cal_${vocabName}_release_mv_unique
      ON concept_alternative_label_${vocabName}_latest_release_mv(concept_key, language, value);

    CREATE MATERIALIZED VIEW IF NOT EXISTS concept_hidden_label_${vocabName}_latest_release_mv AS
    SELECT * FROM concept_hidden_label c WHERE c.concept_key IN (SELECT c2.key FROM concept c2 WHERE c2.vocabulary_key = ${vocabKey});
    CREATE INDEX IF NOT EXISTS chl_${vocabName}_latest_release_mv_fulltext_search_idx
      ON concept_hidden_label_${vocabName}_latest_release_mv USING gin(fulltext_search);
    CREATE UNIQUE INDEX IF NOT EXISTS chl_${vocabName}_release_mv_unique
      ON concept_hidden_label_${vocabName}_latest_release_mv(concept_key, value);

    CREATE MATERIALIZED VIEW IF NOT EXISTS concept_definition_${vocabName}_latest_release_mv AS
    SELECT * FROM concept_definition c WHERE c.concept_key IN (SELECT c2.key FROM concept c2 WHERE c2.vocabulary_key = ${vocabKey});
    CREATE INDEX IF NOT EXISTS cd_${vocabName}_latest_release_mv_fulltext_search_idx
      ON concept_definition_${vocabName}_latest_release_mv USING gin(fulltext_search);
    CREATE UNIQUE INDEX IF NOT EXISTS cd_${vocabName}_release_mv_unique
      ON concept_definition_${vocabName}_latest_release_mv(concept_key, language);

    CREATE MATERIALIZED VIEW IF NOT EXISTS tag_${vocabName}_latest_release_mv AS
    SELECT t.*
    FROM tag t
    INNER JOIN concept_tag ct ON ct.tag_key = t.key
    INNER JOIN concept c ON c.key = ct.concept_key
    WHERE c.vocabulary_key = ${vocabKey};
    CREATE UNIQUE INDEX IF NOT EXISTS tag_${vocabName}_release_mv_unique
    ON tag_${vocabName}_latest_release_mv(name);

    CREATE MATERIALIZED VIEW IF NOT EXISTS concept_tag_${vocabName}_latest_release_mv AS
    SELECT ct.*
    FROM concept_tag ct
    INNER JOIN concept c ON c.key = ct.concept_key
    WHERE c.vocabulary_key = ${vocabKey};
    CREATE UNIQUE INDEX IF NOT EXISTS ct_${vocabName}_release_mv_unique
    ON concept_tag_${vocabName}_latest_release_mv(concept_key, tag_key);
  </insert>

  <update id="updateReleaseViews">
    REFRESH MATERIALIZED VIEW CONCURRENTLY concept_${vocabName}_latest_release_mv;
    REFRESH MATERIALIZED VIEW CONCURRENTLY concept_label_${vocabName}_latest_release_mv;
    REFRESH MATERIALIZED VIEW CONCURRENTLY concept_alternative_label_${vocabName}_latest_release_mv;
    REFRESH MATERIALIZED VIEW CONCURRENTLY concept_hidden_label_${vocabName}_latest_release_mv;
    REFRESH MATERIALIZED VIEW CONCURRENTLY concept_definition_${vocabName}_latest_release_mv;
    REFRESH MATERIALIZED VIEW CONCURRENTLY tag_${vocabName}_latest_release_mv;
    REFRESH MATERIALIZED VIEW CONCURRENTLY concept_tag_${vocabName}_latest_release_mv;
  </update>

  <select id="listLatestRelease" resultType="Concept" resultMap="CONCEPT_MAP_RELEASE_VIEW">
    SELECT DISTINCT ON (<if test="params.query != null">ts_rank_cd(c.fulltext_search, query),</if> c.created, c.key)
    <include refid="CONCEPT_READ_FIELDS"/>, #{vocabName} vocabName
    FROM concept_${vocabName}_latest_release_mv c
    <if test="params.query != null">
      <bind name="table_suffix" value="'_' + _parameter.vocabName + '_latest_release_mv'"/>
      <include refid="FULL_TEXT"/>
    </if>
    <include refid="LIST_COMMON"/>
    ORDER BY <if test="params.query != null">ts_rank_cd(c.fulltext_search, query) DESC,</if> c.created DESC, c.key
    <if test="page != null">
      LIMIT #{page.limit} OFFSET #{page.offset}
    </if>
  </select>

  <select id="countLatestRelease" resultType="Long">
    SELECT COUNT(DISTINCT c.key) FROM concept_${vocabName}_latest_release_mv c
    <if test="params.query != null">
      <bind name="table_suffix" value="'_' + _parameter.vocabName + '_latest_release_mv'"/>
      <include refid="FULL_TEXT"/>
    </if>
    <include refid="LIST_COMMON"/>
  </select>

  <select id="suggestLatestRelease" resultMap="SUGGEST_RESULT_MAP_RELEASE_VIEW">
    <bind name="table_suffix" value="'_' + _parameter.vocabName + '_latest_release_mv'"/>
    <include refid="SUGGEST"/>
  </select>

  <select id="countChildrenLatestRelease" resultType="ChildrenResult">
    <bind name="table_suffix" value="'_' + _parameter.vocabName + '_latest_release_mv'"/>
    <include refid="COUNT_CHILDREN"/>
  </select>

  <select id="findParentsLatestRelease" resultType="String">
    <bind name="table_suffix" value="'_' + _parameter.vocabName + '_latest_release_mv'"/>
    <include refid="FIND_PARENTS"/>
  </select>

  <select id="findParentsLabelsLatestRelease" resultMap="PARENT_RESULT_MAP">
    <bind name="table_suffix" value="''"/>
    <include refid="FIND_PARENTS_LABELS"/>
  </select>

  <select id="getByNameLatestRelease" resultMap="CONCEPT_MAP_RELEASE_VIEW">
    SELECT
    <include refid="CONCEPT_READ_FIELDS"/>, #{vocabName} vocabName
    FROM concept_${vocabName}_latest_release_mv c
    WHERE c.name = #{name,jdbcType=VARCHAR}
  </select>

  <select id="listDefinitionsLatestRelease" resultMap="DEFINITION_RESULT_MAP">
    <bind name="table_suffix" value="'_' + _parameter.vocabName + '_latest_release_mv'"/>
    <include refid="LIST_DEFINITIONS"/>
  </select>

  <select id="listLabelsLatestRelease" resultMap="LABEL_RESULT_MAP">
    <bind name="table_suffix" value="'_' + _parameter.vocabName + '_latest_release_mv'"/>
    <include refid="LIST_LABELS"/>
  </select>

  <select id="listAlternativeLabelsLatestRelease" resultMap="LABEL_RESULT_MAP">
    <bind name="table_suffix" value="'_' + _parameter.vocabName + '_latest_release_mv'"/>
    <include refid="LIST_ALTERNATIVE_LABELS"/>
  </select>

  <select id="countAlternativeLabelsLatestRelease" resultType="Long">
    <bind name="table_suffix" value="'_' + _parameter.vocabName + '_latest_release_mv'"/>
    <include refid="COUNT_ALTERNATIVE_LABELS"/>
  </select>

  <select id="listHiddenLabelsLatestRelease" resultMap="HIDDEN_LABEL_RESULT_MAP">
    <bind name="table_suffix" value="'_' + _parameter.vocabName + '_latest_release_mv'"/>
    <include refid="LIST_HIDDEN_LABELS"/>
  </select>

  <select id="countHiddenLabelsLatestRelease" resultType="Long">
    <bind name="table_suffix" value="'_' + _parameter.vocabName + '_latest_release_mv'"/>
    <include refid="COUNT_HIDDEN_LABELS"/>
  </select>

  <select id="listConceptDefinitionsLatestRelease" resultMap="DEFINITION_RESULT_MAP">
    <bind name="table_suffix" value="'_' + _parameter.vocabName + '_latest_release_mv'"/>
    <include refid="LIST_CONCEPTS_DEFINITION"/>
  </select>

  <select id="listConceptLabelsLatestRelease" resultMap="LABEL_RESULT_MAP">
    <bind name="table_suffix" value="'_' + _parameter.vocabName + '_latest_release_mv'"/>
    <include refid="LIST_CONCEPTS_LABELS"/>
  </select>

  <resultMap id="CONCEPT_MAP_RELEASE_VIEW" type="Concept" autoMapping="true">
    <id property="key" column="key"/>
    <result property="externalDefinitions" column="external_definition_urls" typeHandler="UriArrayTypeHandler"/>
    <result property="sameAsUris" column="same_as_uris" typeHandler="UriArrayTypeHandler"/>
    <result property="editorialNotes" column="editorial_notes" typeHandler="StringArrayTypeHandler"/>
    <collection property="definition" column="{entityKey=key,vocabName=vocabName}" select="listConceptDefinitionsLatestRelease"/>
    <collection property="label" column="{entityKey=key,vocabName=vocabName}" select="listConceptLabelsLatestRelease"/>
    <collection property="tags" column="{key=key,vocabName=vocabName}" select="listTagsLatestRelease"/>
  </resultMap>

  <resultMap id="SUGGEST_RESULT_MAP_RELEASE_VIEW" type="SuggestDto" autoMapping="true">
    <id property="key" column="key"/>
    <collection property="parentDtos" column="{key=key,lang=langParam,fallbackLang=fallbackLangParam}"
                select="findParentsLabelsLatestRelease"/>
  </resultMap>


</mapper>
